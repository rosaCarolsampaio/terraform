image: ubuntu

stages:
  - build
  - kafka
  - golang
  - create
  - list
  - dynamodb
  - lambda


# services:
#   - name: localstack/localstack
#     alias: localstack
#   - name: golang:latest
#     alias: golang

variables:
  SERVICES: s3,sns,sqs, dynamodb,lambda, kafka, ec2
  HOSTNAME_EXTERNAL: localstack 
  AWS_DEFAULT_REGION: eu-west-2
  AWS_ACCESS_KEY_ID: localkey
  AWS_SECRET_ACCESS_KEY: localsecret
  AWS_DYNAMODB_ENDPOINT: http://dynamodb:8000
  GIT_CLEAN_FLAGS: none
  LOCALSTACK_HOST: localstack

before_script:
  # - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.example.com
  - apt -y update
  - apt -y install pip jq
  - pip install --upgrade awscli  awscli-local 


#after_script:
 
cache:
  paths:
    - s3.localhost.localstack.cloud/

test-application:
  stage: build 
  # extends: build
  # cache:
  #   paths:
  #     - s3://my-test-bucket/
  artifacts:
    paths:
      - s3://my-test-bucket/
  script:
    - awslocal s3api list-buckets 
    - awslocal s3 ls
    - awslocal s3 mb s3://my-test-bucket
    - awslocal s3api list-buckets 
    - awslocal s3 cp ./ s3://my-test-bucket/ --recursive

test-localstack:
  stage: list
  dependencies:
    - test-application
  script:
    - awslocal s3 ls
    - awslocal s3api list-buckets 

dynamo-localstack:
  stage: dynamodb
  script:
    - echo '{"Artist":{"S":"Acme Band"},"SongTitle":{"S":"Happy Day"}, "AlbumTitle":{"S":"Songs About Life"},"Awards":{"N":"10"}}' > item_table.json 
    - echo '{"Artist":{"AttributeValueList":[{"S":"Acme Band"}],"ComparisonOperator":"EQ"},"SongTitle":{"AttributeValueList":[{"S":"Happy Day"}],"ComparisonOperator":"EQ"}}' > query_table.json 
    - awslocal configure set region $DEFAULT_REGION
    - awslocal dynamodb create-table --table-name Music --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
    - awslocal dynamodb put-item --table-name Music --item  file://item_table.json  --return-consumed-capacity TOTAL 
    - awslocal dynamodb list-tables 
    - awslocal dynamodb query --table-name Music --key-conditions file://query_table.json
    

lambda-localstack:
  stage: lambda
  script:
   # - awslocal configure set region $DEFAULT_REGION 
    - awslocal  lambda list-functions


kafka-localstack:
  stage: kafka
  script:
    # create a virtual private cloud and save the vpc ID:
    - vpcID=$(awslocal ec2 create-vpc --cidr-block 10.0.0.0/16) 
    - echo $vpcID &&  echo "${vpcID}" > result.json
    - vpcID=$(jq -r '.Vpc.VpcId' result.json) && echo $vpcID

    # create a subrede to the vpc
    - subnetID=$(awslocal ec2 create-subnet --vpc-id $vpcID --cidr-block 10.0.1.0/24)
    - echo $subnetID &&  echo "${subnetID}" > result.json
    - subnetID=$(jq -r '.Subnet.SubnetId' result.json) && echo $subnetID

    # make the subnet public
    - InternetGateway=$(awslocal ec2 create-internet-gateway)
    - echo $InternetGateway &&  echo "${InternetGateway}" > result.json
    - InternetGateway=$(jq -r '.InternetGateway.InternetGatewayId' result.json) && echo $InternetGateway

    # attach the internet gateway to your VPC
    - awslocal ec2 attach-internet-gateway --vpc-id $vpcID --internet-gateway-id $InternetGateway
    - echo '{"BrokerNodeGroupInfo":{"BrokerAZDistribution":"DEFAULT","InstanceType":"kafka.m5.large","ClientSubnets":["'"${subnetID}"'"]},"ClusterName":"wortenCluster","EnhancedMonitoring":"PER_TOPIC_PER_BROKER","KafkaVersion":"2.2.1","NumberOfBrokerNodes":1}' >  kafka.json
    - cat kafka.json

    ### CREATE CLUSTERS
    - awslocal ec2 describe-vpcs --output table
    - awslocal ec2 describe-subnets --filters "Name=vpc-id,Values=$vpcID" --output table | egrep "Name|AvailabilityZone|SubnetId"
    - echo -e "auto.create.topics.enable = true\ndelete.topic.enable = true\nlog.retention.hours = 8" > cluster_config.txt
    - cat cluster_config.txt
    - awslocal kafka create-configuration --region us-west-2c --name "configuration" --description "configuration used for topic creation" --kafka-versions "2.3.1" "2.2.1" --server-properties file://cluster_config.txt 

    - result=$(awslocal kafka create-cluster --cli-input-json file://kafka.json ) && echo $result


Scripts Golang:
  stage: golang
  script:
    - go run main.go