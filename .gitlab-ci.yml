image: ubuntu

stages:
  - build
  - kafka
  - golang
  - create
  - list
  - dynamodb
  - lambda


services:
  - name: localstack/localstack
    alias: localstack
  - name: golang:latest
    alias: golang

variables:
  SERVICES: s3,sns,sqs, dynamodb,lambda, kafka, ec2
  HOSTNAME_EXTERNAL: localstack 
  DEFAULT_REGION: eu-west-2
  AWS_ACCESS_KEY_ID: localkey
  AWS_SECRET_ACCESS_KEY: localsecret
  AWS_DYNAMODB_ENDPOINT: http://dynamodb:8000
  GIT_CLEAN_FLAGS: none
  LOCALSTACK_HOST: localstack

before_script:
  # - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.example.com
  - apt -y update
  - apt -y install pip
  - pip install awscli  awscli-local

#after_script:
 
cache:
  paths:
    - s3.localhost.localstack.cloud/

test-application:
  stage: build 
  # extends: build
  # cache:
  #   paths:
  #     - s3://my-test-bucket/
  artifacts:
    paths:
      - s3://my-test-bucket/
  script:
    - awslocal s3api list-buckets 
    - awslocal s3 ls
    - awslocal s3 mb s3://my-test-bucket
    - awslocal s3api list-buckets 
    - awslocal s3 cp ./ s3://my-test-bucket/ --recursive

test-localstack:
  stage: list
  dependencies:
    - test-application
  script:
    - awslocal s3 ls
    - awslocal s3api list-buckets 

dynamo-localstack:
  stage: dynamodb
  script:
    - echo '{"Artist":{"S":"Acme Band"},"SongTitle":{"S":"Happy Day"}, "AlbumTitle":{"S":"Songs About Life"},"Awards":{"N":"10"}}' > item_table.json 
    - echo '{"Artist":{"AttributeValueList":[{"S":"Acme Band"}],"ComparisonOperator":"EQ"},"SongTitle":{"AttributeValueList":[{"S":"Happy Day"}],"ComparisonOperator":"EQ"}}' > query_table.json 
    - awslocall configure set region $DEFAULT_REGION
    - awslocal  dynamodb create-table --table-name Music --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
    - awslocal  dynamodb put-item --table-name Music --item  file://item_table.json  --return-consumed-capacity TOTAL 
    - awslocal  dynamodb list-tables 
    - awslocal  dynamodb query --table-name Music --key-conditions file://query_table.json
    

lambda-localstack:
  stage: lambda
  script:
    - awslocal configure set region $DEFAULT_REGION 
    - awslocal  lambda list-functions


kafka-localstack:
  stage: kafka
  script:
    - echo '{"BrokerNodeGroupInfo":{"BrokerAZDistribution":"DEFAULT","InstanceType":"kafka.m5.large","ClientSubnets":["wortenCluster-1 Subnet ID","wortenCluster-2 Subnet ID","wortenCluster-3 Subnet ID"],"SecurityGroups":["AWSKafkaTutorialVPC Security Group ID"]},"ClusterName":"wortenCluster","EnhancedMonitoring":"PER_TOPIC_PER_BROKER","KafkaVersion":"2.2.1","NumberOfBrokerNodes":3}' >  kafka.json
    #cria uma vpc
    - message=$(awslocal ec2 create-vpc --cidr-block 10.0.0.0/16)
    #cria uma subrede para a vpc
    - awslocal ec2 create-subnet --vpc-id $message.VpcId --cidr-block 10.0.1.0/24
    #torna a subrede pública
    - awslocal ec2 create-internet-gateway > result.json
     #anexe o gateway da Internet à sua VPC
    - message=$(result.json) 
    - awslocal ec2 attach-internet-gateway --vpc-id vpc-2f09a348 --internet-gateway-id $message.InternetGateway["InternetGatewayId"]
    - awslocal kafka create-cluster --cli-input-json file://kafka.json  --region $DEFAULT_REGION


Scripts Golang:
  stage: golang
  script:
    - go run main.go